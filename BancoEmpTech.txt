create database if not exists emptech;
use emptech;
create database if not exists emptech_EricPinheiro;
use emptech_EricPinheiro;
create table if not exists funcionarios(
codFunc int auto_increment primary key,
nomeFunc varchar(255) not null
);

create table if not exists veiculos 
(
codVeic int auto_increment primary key,
modelo varchar(255) not null,
placas varchar(20) not null,
codFunc int 
);
 insert into funcionarios(nomeFunc) values
 ('João Silva'), ('Maria Oliveira'),('Pedro Santos'),('Ana Costa'),('Lucas Almeida'),('Fernanda Lima'), 
 /* novos dados */('Eric Pinheiro'), ('Elisa da Silva'), ('João Paulo');
 
 insert into veiculos(modelo, placas, codFunc) values ('Fiat Uno', 'ABC1D23',1),('Honda Civic', 'XYZ2E34',1),('Toyota Corolla', 'LMN3F45',2),('Chevrolet Onix', 'OPQ4G56',3),('VW Gol', 'UVW6I78',5),('Pegeout 208', 'YZA7J89',null),
 /* novos dados*/ ('VW Kombi','GHJ6G34','8'),('Abhart 500','WER8H90','8'),('Renault Twingo','ASD6G74','9')
 ;
 

   create table atuacaoVendas (
   codAtuacao int auto_increment primary key,
   descricao varchar(255) not null);
   
   insert into atuacaoVendas(descricao) values ('Vendas de veiculos novos'),('Vendas de veiculos usados'),('Manutenção e reparo de veiculos'),('Serviço de pós vendas'),('Vendas de veiculos novos'),('Vendas de veiculos novos'),
   /*Novos dados*/('Departamento de peças'), ('Seguradora de Veiculos'),('Vendas de veiculos de Leilão');
   /*os dados tem divergencia pq executei e mudei dps (executei sem querer)*/
   
   create table indicacoes (
   codIndicador int,
   codIndicado int, 
   primary key (codIndicador, codIndicado),
   foreign key (codIndicador) references funcionarios(codFunc), 
   foreign key (codIndicado) references Funcionarios(codFunc)
   );
   
   insert into indicacoes( codIndicador, codIndicado) values (1,2),(1,3),(2,4),(2,5),(4,6),
   /*novos dados*/(7,6),(1,7),(7,8);
   select * from funcionarios;
   /*
   delimiter //
create function calculaEstoque(Id int, qtd int) returns int
begin
declare estoqueAtual int;
declare qtdVenda int;
declare estoqueAtualizado int;
select estoque into estoqueAtual from livros where livroId = Id limit 1;
set estoqueAtualizado = estoqueAtual - qtd;
return estoqueAtualizado;
end // 
delimiter ;
   
   */
   delimiter //
   create function getFuncionarioVeiculoCount(id int) returns int
   begin 
  declare qtdVeiculos int;
  #cria uma variavel -> select contador e insira na variavel da tabela "" onde o id da tabela é igual a id informada
  select count(codFunc) into qtdVeiculos from veiculos where codFunc = id;
  return qtdVeiculos;
   end//
   delimiter ;
   
   select getFuncionarioVeiculoCount(6);

delimiter //
create procedure addVenda(descricaoNova varchar(50))
begin
insert into atuacaoVendas(descricao) values (DescricaoNova);
end//
delimiter ;

call addVenda("Venda de veiculos de leilão");
select * from atuacaoVendas;

select f.codFunc, f.nomeFunc,v.modelo,v.placas,a.descricao from funcionarios f cross join veiculos v cross join atuacaoVendas a;
 
 select f.nomeFunc as nome, v.modelo from veiculos v join  funcionarios f on v.codFunc = f.codFunc;
 
 #equi Join
 
 select f.nomeFunc as nome, v.modelo from veiculos v join funcionarios f using (codfunc);
 
 #left Join
 /* retorna todos os campos do lado esquerdo do join que se relaciona com o lado direito do join, mais os registros que não relacionam, com o lado direito e que sejam do lado esquerdo. */
 select f.nomeFunc as nome, v.modelo from veiculos v left join funcionarios f using (codFunc);
 
 #right Join
 /* retorna todos os campos do lado direito do join que se relaciona com o lado esquedo do join, mais os registros que não relacionam, com o lado esquerdo e que sejam do lado direito. */
  select f.nomeFunc as nome, v.modelo from veiculos v right join funcionarios f using (codFunc);
 
 #full Join
   select f.nomeFunc as nome, v.modelo from veiculos v left join funcionarios f using (codFunc) union
   select f.nomeFunc as nome, v.modelo from veiculos v right join funcionarios f using (codFunc);
   
   
   #view
   create view func_veic as select f.nomeFunc as nome, v.modelo from veiculos v left join funcionarios f using (codFunc) union
   select f.nomeFunc as nome, v.modelo from veiculos v right join funcionarios f using (codFunc);
   
   select * from func_veic;
   
   #selfjoin
   
   select i1.codIndicador as 'Id Indocador', f1.nomeFunc as 'nome Indicador', 
   i1.codIndicado as 'Id Indicado', f2.nomeFunc as 'Nome Indicado' from indicacoes i1 
   join funcionarios f1 on i1.codIndicador = f1.codFunc 
   join funcionarios f2 on i1.Codindicado = f2.codFunc; 